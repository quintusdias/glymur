matrix:
  fast_finish: true     # immediately finish build once one of the jobs fails.

environment:

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\run_with_env.cmd"
    clone_folder: C:\projects\glymur

  matrix:

    - CONDA_ROOT: "C:\\Miniconda3_64"
      PYTHON_VERSION: "3.11"
      PYTHON_ARCH: "64"
      CONDA_PY: "311"
      USE_PATH_FOR_GDAL_PYTHON: "YES"

    - CONDA_ROOT: "C:\\Miniconda3_64"
      PYTHON_VERSION: "3.12"
      PYTHON_ARCH: "64"
      CONDA_PY: "312"
      USE_PATH_FOR_GDAL_PYTHON: "YES"

    - CONDA_ROOT: "C:\\Miniconda3_64"
      PYTHON_VERSION: "3.13"
      PYTHON_ARCH: "64"
      CONDA_PY: "313"
      USE_PATH_FOR_GDAL_PYTHON: "YES"

# We always use a 64-bit machine, but can build x86 distributions
# with the PYTHON_ARCH variable (which is used by CMD_IN_ENV).
platform:
    - x64

build: off

install:
  # cancel older builds for the same PR
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }

  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit)
  # updates conda & installs: conda-build jinja2 anaconda-client
  - powershell .\ci\install.ps1
  - SET PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%PATH%
  - echo "install"
  - cd
  - ls -ltr
  - git tag --sort v:refname

  # this can conflict with git
  - cmd: rmdir C:\cygwin /s /q

  # install our build environment
  - cmd: conda config --set show_channel_urls true --set always_yes true --set changeps1 false
  - cmd: conda update -q conda
  - cmd: conda config --set ssl_verify false

  # this is now the downloaded conda...
  - cmd: conda info -a

  # create our env
  - SET REQ=ci\travis-%CONDA_PY%.yaml
  - cmd: echo "installing requirements from %REQ%"
  - cmd: conda env create --file=%REQ%
  - cmd: conda list -n glymur
  - cmd: activate glymur
  - cmd: echo "installing requirements from %REQ% - done"

  # build em using the local source checkout in the correct windows env
  - cmd: '%CMD_IN_ENV% python -m pip install -e .'

test_script:
  # tests
  - cmd: conda activate glymur
  - cmd: conda list
  - cmd: cd c:\projects\glymur
  - ls -ltr
  - cmd: python -c "import sys; print(sys.executable)"
  - cmd: c:\miniconda3_64\envs\glymur\Scripts\pytest -n 4 -x
  - cmd: c:\miniconda3_64\envs\glymur\Scripts\pytest --doctest-glob='*.rst' docs/source/how_do_i.rst
  - cmd: c:\miniconda3_64\envs\glymur\Scripts\pytest --doctest-modules glymur
